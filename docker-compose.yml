version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_USER=cm80dsv950015i9mpm20pa4fnt
      - DB_HOST=db
      - DB_NAME=cm80dsv970017i9mpm0mwrf89d
      - DB_PASSWORD=cXlND3kcIYXDJMudmUf6mwYm
      - DB_PORT=5432
    depends_on:
      - db
    volumes:
      - ./logs:/app/logs
    networks:
      - telegraph-network
    pull_policy: if_not_present
  
  db:
    # Используем стабильный образ PostgreSQL из Docker Hub
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=cm80dsv950015i9mpm20pa4fnt
      - POSTGRES_PASSWORD=cXlND3kcIYXDJMudmUf6mwYm
      - POSTGRES_DB=cm80dsv970017i9mpm0mwrf89d
      # Включаем режим доверенной аутентификации для отладки
      - POSTGRES_HOST_AUTH_METHOD=md5
      # Дополнительные настройки для стабильности
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telegraph-network
    pull_policy: if_not_present
    # Дополнительные параметры для стабильной работы
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cm80dsv950015i9mpm20pa4fnt -d cm80dsv970017i9mpm0mwrf89d"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  telegraph-network:
    driver: bridge

volumes:
  postgres_data:
